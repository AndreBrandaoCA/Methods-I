using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MethodsV
{
    class Program
    {
        static Random rand = new Random();
        static void Main(string[] args)
        {
            DisplayMenu();
        }
        #region Question 1 
        /*1.	Write a method with header static void DisplayIntArray(int[] numbers). 
         * The first argument is an array of ints. 
         * There is no return value. 
         * This method displays all the elements of the argument on a single line. 
         * Each item will occupy three columns.
         * Call this method from main with a suitable argument.*/
        static void DisplayIntArray(int[] arrayOfNumbers)
        {
            Console.Write("{ ");
            foreach (int number in arrayOfNumbers)
            {
                Console.Write($"{number} ");
            }
            Console.Write("}\n");
        }
        #endregion
        #region Question 2 
        /*2.	Write a method with header static int[] GenerateRandomIntArray(int numberOfItems, int largestValue). 
         * The first argument is an int indicating the number of elements that will be present in the return array. 
         * The second argument is an int representing the largest item in the array. The returned value is an array of integers. 
         * This method does the following:
         *  a.	Declare and initialized a variable of type Random (Random generator = new Random();)
         *  b.	Declare an array of type int (you may call it result)
         *  c.	Allocate storage for the correct number of items
         *  d.	Using your favorite looping statement, assign a random integer to each element of the array (result[i] = generator.Next(largestValue);)
         *  In your main method, call the above method three times with arguments 15, 10 and 25, 10 and 30, 100. 
         *  In each case assignment the results to a suitable variable and use the DisplayIntArray() method to display the value.*/
        static int[] GenerateRandomIntArray(int numberOfItems, int largestValue)
        {
            return FillIntArray(size: numberOfItems, highest: largestValue);
        }
        #endregion
        #region Question 3 
        /*3.	Write a method with header static int[] CountEvenOdd(int[] array). 
         * The argument is an int array. The returned value is an array of 2 integers. 
         * The elements of the return array will be a count of the odd and even items in the argument. 
         * The first element of the returned array represents the number of odds in the argument and the second element indicates the number of evens in the argument.
         * The method will create an int array of 2 elements (call this the result). 
         * Each item of the argument is examined and the appropriate element of the result array is incremented. 
         * In your main method, call the GenerateRandomIntArray() method to create an int array using and assign it to a suitable variable. 
         * Using the DisplayIntArray() method display all the item of the return. Call the CountEvenOdd() 
         * method passing the above array as an argument and display the return value. Do a count to verify that your method is working correctly.*/
        static int[] CountEvenOdd(int[] array)
        {
            int[] result = new int[2];
            //count[0] = odd numbers;
            //count[1] = even numbers;
            foreach (int i in array)
            {
                if (i % 2 != 0)
                {
                    result[0]++;
                }
                else
                {
                    result[1]++;
                }
            }
            return result;
        }
        #endregion
        #region Question 4 
        /*4.	Write a method with header static int[] CalculateDigitFrequencies(int[] array). 
         * The argument is an int array with values ranging from 0 to 9. The returned value is an array of 10 integers. 
         * The elements of the return array will be a count of the frequencies of the items in the argument. 
         * The first element of the returned array represents the number of 0’s in the argument, 
         * the second element indicates the number of 1’s in the argument and the third element will indicate the number of 2’s in the argument.
         * The method will create an int array of 10 elements (call this the result). 
         * Each item of the argument is examined and the appropriate element of the result array is incremented. 
         * In your main method, create an int array using the GenerateRandomIntArray() method remember to use 10 as the second argument 
         * to the method and then print out the elements using the DisplayIntArray() method. Call the above method and display the return value.
         * Do a count to verify that your method is working correctly.*/
        static int[] CalculateDigitFrequencies(int[] array)
        {
            int[] result = new int[10];
            foreach (int i in array)
            {
                switch (i)
                {
                    case 0:
                        result[0]++;
                        break;
                    case 1:
                        result[1]++;
                        break;
                    case 2:
                        result[2]++;
                        break;
                    case 3:
                        result[3]++;
                        break;
                    case 4:
                        result[4]++;
                        break;
                    case 5:
                        result[5]++;
                        break;
                    case 6:
                        result[6]++;
                        break;
                    case 7:
                        result[7]++;
                        break;
                    case 8:
                        result[8]++;
                        break;
                    case 9:
                        result[9]++;
                        break;
                }
            }
            return result;
        }
        #endregion
        #region Question 5 
        /*5.Write a method with header static int[] CalculateLastDigitFrequencies(int[] array). 
         * The argument is an int array. The returned value is an array of 10 integers. 
         * The elements of the return array will be a count of the frequencies of the items in the argument. 
         * The first element of the returned array represents the number with last digit of 0’s in the argument, 
         * the second element indicates the number with last digit of 1’s in the argument and the third element will 
         * indicate the number with last digit of 2’s in the argument.
         * The method will create an int array of 10 elements (call this the result). 
         * Each item of the argument is examined and the appropriate element of the result array is incremented. 
         * In your main method, create an int array using the GenerateRandomIntArray() method and then print out the elements using the DisplayIntArray() method. 
         * Call the above method and display the return value. Do a count to verify that your method is working correctly.*/
        static int[] CalculateLastDigitFrequencies(int[] array)
        {
            int[] result = new int[10];
            foreach(int i in array)
            {
                int lastDigit = i % 10;
                switch (lastDigit)
                {
                    case 0:
                        result[0]++;
                        break;
                    case 1:
                        result[1]++;
                        break;
                    case 2:
                        result[2]++;
                        break;
                    case 3:
                        result[3]++;
                        break;
                    case 4:
                        result[4]++;
                        break;
                    case 5:
                        result[5]++;
                        break;
                    case 6:
                        result[6]++;
                        break;
                    case 7:
                        result[7]++;
                        break;
                    case 8:
                        result[8]++;
                        break;
                    case 9:
                        result[9]++;
                        break;
                }
            }
            return result;
        }
        #endregion
        #region Question 6
        /*6.	Write a method with header static int[] CalculateNumberFrequencies(int[] array). 
         * The argument is an int array with values ranging from 0 to 99. 
         * The returned value is an array of 10 integers. 
         * The first element will indicate the number or unit values in the argument (i.e. values 0-9), 
         * the second element will indicate the number of 10 values (i.e. values 10-19), 
         * the third element will indicate the number of 20 values (i.e. values 20-29) etc.
         * The method will create an int array of 10 elements (call this the result). 
         * Each item of the argument is examined and the appropriate element of the result array is incremented. */
        static int[] CalculateNumberFrequencies(int[] array)
        {
            int[] result = new int[10];
            foreach (int i in array)
            {
                if (i <= 10)
                {
                    result[0]++;
                }
                else if (i > 10 && i <= 20) { result[1]++; }
                else if (i > 20 && i <= 30) { result[2]++; }
                else if (i > 30 && i <= 40) { result[3]++; }
                else if (i > 40 && i <= 50) { result[4]++; }
                else if (i > 50 && i <= 60) { result[5]++; }
                else if (i > 60 && i <= 70) { result[6]++; }
                else if (i > 70 && i <= 80) { result[7]++; }
                else if (i > 80 && i <= 90) { result[8]++; }
                else if (i > 90 && i <= 99) { result[9]++; }
            }
            return result;
        }
        #endregion  
        #region Question 7
        /*7.	Write a method that takes a string and return a distribution of the letter in the string. 
         * A distribution can be an array of the letter frequencies. 
         * To simplify code, you may assume that all the letters will be lowercased (or uppercased) and there are no periods or spaces. 
         * Call the above method and display the return value. 
         * Do a count to verify that your method is working correctly.*/
         static int[] LettersInString(string userString)
        {
            int[] result = new int[23];
            userString.ToLower();
            foreach (int i in userString.ToCharArray())
            {
                switch (i)
                {
                    case 'a': result[0]++; break;
                    case 'b': result[1]++; break;
                    case 'c': result[2]++; break;
                    case 'd': result[3]++; break;
                    case 'e': result[4]++; break;
                    case 'f': result[5]++; break;
                    case 'g': result[6]++; break;
                    case 'h': result[7]++; break;
                    case 'i': result[8]++; break;
                    case 'j': result[9]++; break;
                    case 'k': result[10]++; break;
                    case 'l': result[11]++; break;
                    case 'm': result[12]++; break;
                    case 'n': result[13]++; break;
                    case 'o': result[14]++; break;
                    case 'p': result[15]++; break;
                    case 'r': result[16]++; break;
                    case 's': result[17]++; break;
                    case 't': result[18]++; break;
                    case 'u': result[19]++; break;
                    case 'w': result[20]++; break;
                    case 'x': result[21]++; break;
                    case 'y': result[22]++; break;
                    case 'z': result[23]++; break;
                }
            }
            return result;
        }
        #endregion
        #region Question 8
        /*8.	Write a method that returns a binary string representation of its argument. 
         * Call this method from your main and display the returned values. 
         * If you call the method three times with the integers 7, 128 and 15 respectively 
         * the method will return the binary strings 111, 10000000 and 1111 respectively. */
         static string BinaryString(int number)
        {
            return Convert.ToString(number, 2);
        }
        #endregion
        #region Question 9
        /*9.	Write a method that will return the year-end balance for a mortgage, given the beginning balance, the yearly interest rate, and the bi-weekly payments. 
         * You can assume that there are 26 payments in the year and the mortgage is re-calculated after each payment. 
         * For each period, you will need to calculate the interest 
         * (you will need to calculate the daily interest and times it by the number of days in each period), 
         * then add this to the starting balance and then subtract the payment. 
         * If the starting principal is $300,000, the interest rate is 2.5% and the bi-weekly payment is $1,000, what will be the year-end balance? 
         * How much would you save if you increased the monthly payment by $100?*/
         static int MortgageCalculator(double initBalance, double yearlyInterest, double payment)
        {
            double currBalance = initBalance;
            int numberOfPaymentsYear = 26, yearend = 0;
            double montlyrate = yearlyInterest / numberOfPaymentsYear;
            for (yearend = 0; currBalance >= 0; yearend++)
            {
                currBalance = currBalance + (currBalance * yearlyInterest) - (numberOfPaymentsYear * payment);
            }
            return yearend;
        }
        #endregion
        #region Question 10
        #endregion
        #region Question 11
        #endregion
        #region Question 12
        #endregion
        #region DisplayMenu()
        static void DisplayMenu()
        {
            int size = 5, highest = 0, smallest = 0;
            Console.WriteLine("     Part   V (question 1-6)");
            Console.WriteLine("------------------------------------");
            Console.WriteLine(" 1) DisplayIntArray");
            Console.WriteLine(" 2) Generate Random Array");
            Console.WriteLine(" 3) Count Evens and Odds");
            Console.WriteLine(" 4) Calculate Digit Frequencies");
            Console.WriteLine(" 5) Calculate Last Digit Frequencies");
            Console.WriteLine(" 6) Calculate Bucket Number Frequencies");
            Console.WriteLine(" 7) LetterFrequency");
            Console.WriteLine(" 8) Binary String");
            Console.WriteLine(" 9) Mortgage Calculation");
            Console.WriteLine("");
            Console.WriteLine("");
            Console.WriteLine("0) Exit");
            int option = 0;
            do
            {
                Console.Write("   Enter your choice ->");
                option = Convert.ToInt32(Console.ReadLine());
                switch (option)
                {
                    #region Tester 1
                    case 1:
                        int[] arrayOfNumbers = (FillIntArray(size,1,99));
                        DisplayIntArray(arrayOfNumbers);
                        break;
                    #endregion
                    #region Tester 2
                    case 2:
                        DisplayIntArray((FillIntArray(size: 10, highest: 10)));
                        DisplayIntArray((FillIntArray(size: 25, highest: 10)));
                        DisplayIntArray((FillIntArray(size: 30, highest: 100)));
                        break;
                    #endregion
                    #region Tester 3
                    case 3:
                        arrayOfNumbers = FillIntArray(size: 10, highest: 10);
                        DisplayIntArray(arrayOfNumbers);
                        DisplayIntArray(CountEvenOdd(arrayOfNumbers));
                        break;
                    #endregion
                    #region Tester 4
                    case 4:
                        arrayOfNumbers = FillIntArray(size: 10, highest: 10);
                        DisplayIntArray(arrayOfNumbers);
                        DisplayIntArray(CalculateDigitFrequencies(arrayOfNumbers));
                        break;
                    #endregion
                    #region Tester 5
                    case 5:
                        arrayOfNumbers = FillIntArray(size: 10, highest: 99);
                        DisplayIntArray(arrayOfNumbers);
                        DisplayIntArray(CalculateLastDigitFrequencies(arrayOfNumbers));
                        break;
                    #endregion
                    #region Tester 6
                    case 6:
                        arrayOfNumbers = FillIntArray(size: 10, highest: 99);
                        DisplayIntArray(arrayOfNumbers);
                        DisplayIntArray(CalculateNumberFrequencies(arrayOfNumbers));
                        break;
                    #endregion
                    #region Tester 7
                    case 7:
                        Console.WriteLine("Please type a phrase: ");
                        string userString = Console.ReadLine();
                        DisplayIntArray(LettersInString(userString));
                        break;
                    #endregion
                    #region Tester 8
                    case 8:
                        Console.WriteLine($"{BinaryString(7)}");
                        Console.WriteLine($"{BinaryString(128)}");
                        Console.WriteLine($"{BinaryString(15)}");
                        break;
                        #endregion
                    #region Tester 9
                    case 9:
                        Console.WriteLine($"Paying {1000:C} bi-wekly at the rate of {0.025:P} you will have finished paying {300000:C} after {MortgageCalculator(300000, 0.025,1000)} year");
                        Console.WriteLine($"Paying {2000:C} bi-wekly at the rate of {0.025:P} you will have finished paying {300000:C} after {MortgageCalculator(300000, 0.025, 2000)} year");
                        break;
                    #endregion
                    #region Exit
                    case 0:
                        break;
                    #endregion
                    #region Default
                    default:
                        Console.WriteLine("Please select a valid option);");
                        break;
                    #endregion
                }
            } while (option != 0);
        }
        #endregion
        #region FillIntArray
        static int[] FillIntArray(int size, int smallest = 0, int highest = 0)
        {
            int[] arrayOfNumbers = new int[size];
            if (smallest != 0 && highest != 0)
            {
                for (int i = 0; i < size; i++)
                {
                    arrayOfNumbers[i] = rand.Next(smallest, highest);
                }
            }
            else if (highest != 0)
            {
                for (int i = 0; i < size; i++)
                {
                    arrayOfNumbers[i] = rand.Next(1, highest);
                }
            }
            else if (smallest !=0 )
            {
                for (int i = 0; i < size; i++)
                {
                    arrayOfNumbers[i] = rand.Next(smallest, 100);
                }
            }
            else
            {
                for (int i = 0; i < size; i++)
                {
                    arrayOfNumbers[i] = rand.Next(0, 100);
                }
            }
            return arrayOfNumbers;
        }
        #endregion
    }
}
